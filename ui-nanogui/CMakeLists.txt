MESSAGE( STATUS ">> -------------------------------------------------------------------- <<" )
MESSAGE( STATUS ">> --------------------- UI - NGUI ------------------------------------ <<" )

cmake_minimum_required( VERSION 3.2 FATAL_ERROR )
# We need at least C++11
set( CMAKE_CXX_STANDARD 11 )
# Distinction between Clang and AppleClang
cmake_policy( SET CMP0025 NEW )

# The project name and version
project( Spirit_NanoGUI VERSION 0.0 LANGUAGES CXX )
set( SPIRIT_GUI_INCLUDE_DIRS )
set( SPIRIT_GUI_DEPENDENCIES )

### spirit core ############################
set( SPIRIT_GUI_INCLUDE_DIRS ${SPIRIT_GUI_INCLUDE_DIRS} ${SPIRIT_INCLUDE_DIRS} )
set( SPIRIT_GUI_DEPENDENCIES ${SPIRIT_GUI_DEPENDENCIES} ${SPIRIT_LIBRARIES_STATIC} )
############################################

### VFRendering ############################
# add_subdirectory( ${CMAKE_SOURCE_DIR}/thirdparty/VFRendering )
set( SPIRIT_GUI_INCLUDE_DIRS ${SPIRIT_GUI_INCLUDE_DIRS} ${CMAKE_SOURCE_DIR}/thirdparty/VFRendering/include )
set( SPIRIT_GUI_DEPENDENCIES ${SPIRIT_GUI_DEPENDENCIES} VFRendering )
############################################

### nanogui ################################
# Disable building extras we won't need (pure C++ project)
set( NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE )
set( NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE )
set( NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE )
# Add the configurations from nanogui
add_subdirectory( ${PROJECT_SOURCE_DIR}/thirdparty/nanogui )
# For reliability of parallel build, make the NanoGUI targets dependencies
set_property( TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies" )
# Various preprocessor definitions have been generated by NanoGUI
add_definitions( ${NANOGUI_EXTRA_DEFS} )
# On top of adding the path to nanogui/include, you may need extras
set( SPIRIT_GUI_INCLUDE_DIRS ${SPIRIT_GUI_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/thirdparty/nanogui/include ${NANOGUI_EXTRA_INCS} )
# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
set( SPIRIT_GUI_DEPENDENCIES ${SPIRIT_GUI_DEPENDENCIES} nanogui ${NANOGUI_EXTRA_LIBS} )
############################################

### The GUI ################################
# Flag for fmt to be header-only
add_definitions( -DFMT_HEADER_ONLY )
# Sources
set( SPIRIT_GUI_SOURCES
    src/AdvancedGraph.cpp
    src/EnergyGraph.cpp
    src/MethodWidget.cpp )
# Build
add_executable( ${PROJECT_NAME} ${SPIRIT_GUI_SOURCES} main.cpp )
target_include_directories( ${PROJECT_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/include ${SPIRIT_GUI_INCLUDE_DIRS} )
target_link_libraries( ${PROJECT_NAME} ${SPIRIT_GUI_DEPENDENCIES} )
# Set executable name
set( SPIRIT_EXE_NAME "spirit" )
set_target_properties( ${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${SPIRIT_EXE_NAME} )
############################################

######### Generate a .user file for VS to set the VS Working Directory
if ( WIN32 )
    set( USERFILE_PLATFORM "Win32" )
    set( USERFILE_WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
    MESSAGE( STATUS ">> Windows Platform:           " ${USERFILE_PLATFORM} )
    MESSAGE( STATUS ">> Windows Working Dir:        " ${USERFILE_WORKING_DIRECTORY} )
    ### Output a .user file for VS to use, setting the VS Working Directory
    configure_file( ${CMAKE_SOURCE_DIR}/CMake/working_directory.vcxproj.user.in ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.vcxproj.user @ONLY )
endif()
#############################################

MESSAGE( STATUS ">> --------------------- UI - NGUI - Done  ---------------------------- <<" )
MESSAGE( STATUS ">> -------------------------------------------------------------------- <<" )