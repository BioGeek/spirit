MESSAGE( STATUS ">> -------------------------------------------------------------------- <<" )
MESSAGE( STATUS ">> --------------------- UI - QT -------------------------------------- <<" )

######### CMake Version #####################
cmake_minimum_required( VERSION 2.8.11 )
#############################################


######### Project Name ######################
project( MonoSpinQT )
SET( EXECUTABLE_NAME monospin )
#############################################


### Find includes in corresponding build directories
set( CMAKE_INCLUDE_CURRENT_DIR ON )
### Let CMake run moc on QT ui files automatically
set( CMAKE_AUTOMOC ON )
### Let CMake collect QT Resources automatically
set( CMAKE_AUTORCC ON )
### Let CMake handle .ui files automatically
# set(CMAKE_AUTOUIC ON) # unfortunately, for this, .ui files ned to be next to corresponding .cpp files
######### Have the binary placed into the source head
### Output paths for single-config builds
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR} )
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR})
# set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
# set(PROJECT_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin2)
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
# set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
### Output paths for multi-config builds (e.g. msvc)
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_SOURCE_DIR} )
    # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${youroutputdirectory} )
    # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${youroutputdirectory} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
#############################################
set( CMAKE_DISABLE_SOURCE_CHANGES  ON )
set( CMAKE_DISABLE_IN_SOURCE_BUILD ON )
#############################################


######### QT Path ########################
if( USER_PATH_QT )
    set( CMAKE_PREFIX_PATH ${USER_PATH_QT} )
else()
    ### IFF and developers' default paths
    if ( WIN32 )
        set( CMAKE_PREFIX_PATH "C:/QT/5.7/msvc2015/" )
    elseif ( APPLE)
        set( CMAKE_PREFIX_PATH "/usr/local/qt-5.5/" )
    elseif ( UNIX)
        set( CMAKE_PREFIX_PATH "/usr/local/qt-5.5/" )
    endif()
endif()
MESSAGE( STATUS ">> Please check the CMAKE_PREFIX_PATH to make sure QT5 is found")
MESSAGE( STATUS ">> CMAKE_PREFIX_PATH:             " ${CMAKE_PREFIX_PATH} )
##########################################



######### Find the Qt libraries ##########
#find_package(Qt5 REQUIRED)
find_package( Qt5Core REQUIRED )
#MESSAGE( STATUS ">> Found QTCore at:        " ${Qt5Core_DIR} )
find_package( Qt5Gui REQUIRED )
#MESSAGE( STATUS ">> Found QTGui at:         " ${Qt5Gui_DIR} )
find_package( Qt5Widgets REQUIRED )
#MESSAGE( STATUS ">> Found QTWidgets at:     " ${Qt5Widgets_DIR} )
find_package( Qt5Charts REQUIRED )
#MESSAGE( STATUS ">> Found QTCharts at:      " ${Qt5Charts_DIR} )
find_package( Qt5OpenGL REQUIRED )
#MESSAGE( STATUS ">> Found QTOpenGL at:      " ${Qt5OpenGL_DIR} )
###########################################


######### Where to search for library headers
include_directories(${PROJECT_SOURCE_DIR}/include
					${CORE_INCLUDE_DIRS}
					${GLAD_INCLUDE_DIRS}
					${GLM_INCLUDE_DIRS}
					${GL_INCLUDE_DIRS})
###########################


######### Subdirectories to look for CMakeLists.txt
### Header Gropus
set( HEADER_UI_QT_ROOT )
### Source Groups
set( SOURCE_UI_QT_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp )
### Add Subdirectories
add_subdirectory( ${PROJECT_SOURCE_DIR}/src )
add_subdirectory( ${PROJECT_SOURCE_DIR}/include )
add_subdirectory( ${PROJECT_SOURCE_DIR}/ui )
### Folder include
source_group( "include" FILES ${HEADER_UI_QT_ROOT} )
### Folder src
source_group( "src" FILES ${SOURCE_UI_QT_ROOT} )
source_group( "ui" FILES ${UI_FILES} )
###########################


######### Convert UI Files to Headers
qt5_wrap_ui( UI_SOURCE ${UI_FILES} )
#############################################


######### THIS IS VERY UGLY, but makes the VS project tidy... a nicer solution is welcome!
SET( AUTOGENERATED_FILES
     ${PROJECT_BINARY_DIR}/CMakeFiles/${EXECUTABLE_NAME}.dir/qrc_resources.cpp
     ${PROJECT_BINARY_DIR}/${EXECUTABLE_NAME}_automoc.cpp
     ${PROJECT_BINARY_DIR}/ui_DebugWidget.h
     ${PROJECT_BINARY_DIR}/ui_MainWindow.h
     ${PROJECT_BINARY_DIR}/ui_PlotsWidget.h
     ${PROJECT_BINARY_DIR}/ui_SettingsWidget.h )
source_group( "autogenerated" FILES ${AUTOGENERATED_FILES})
#############################################


######### Tell CMake to create the executable
add_executable( ${EXECUTABLE_NAME}
    ${HEADER_UI_QT_ROOT}
    ${SOURCE_UI_QT_ROOT}
    ${UI_SOURCE}
    resources.qrc )
#############################################


######### Link the libraries into the executable
target_link_libraries( ${EXECUTABLE_NAME} core gl Qt5::Core Qt5::Gui Qt5::Widgets Qt5::Charts Qt5::OpenGL )
### OSX and Unix need libdl
if( APPLE )
    target_link_libraries( ${EXECUTABLE_NAME} dl )
elseif( UNIX )
    target_link_libraries( ${EXECUTABLE_NAME} dl )
elseif( WIN32 )
endif()
#############################################


######### Generate a .user file for VS to set the VS Working Directory
if ( WIN32 )
	set( USERFILE_PLATFORM "Win32" )
	set( USERFILE_WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
	MESSAGE( STATUS ">> Windows Platform:           " ${USERFILE_PLATFORM} )
	MESSAGE( STATUS ">> Windows Working Dir:        " ${USERFILE_WORKING_DIRECTORY} )
	### Output a .user file for VS to use, setting the VS Working Directory
	configure_file( ${CMAKE_SOURCE_DIR}/CMake/working_directory.vcxproj.user.in ${PROJECT_BINARY_DIR}/${EXECUTABLE_NAME}.vcxproj.user @ONLY )
endif()
#############################################

######### Header and Source messages ########
if ( PRINT_SOURCES )
    MESSAGE( STATUS ">> Headers:                    ${HEADER_UI_QT_ROOT}" )
    MESSAGE( STATUS ">> Sources:                    ${SOURCE_UI_QT_ROOT}" )
    MESSAGE( STATUS ">> UI Files:                   ${UI_SOURCE}" )
    MESSAGE( STATUS ">> Autogenerated Files:        ${AUTOGENERATED_FILES}" )
endif ()
#############################################

MESSAGE( STATUS ">> --------------------- UI - QT done --------------------------------- <<" )
MESSAGE( STATUS ">> -------------------------------------------------------------------- <<" )